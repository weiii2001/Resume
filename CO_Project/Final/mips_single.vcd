$date
	Wed Jun 16 19:40:33 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb_SingleCycle $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module CPU $end
$var wire 1 # BNE $end
$var wire 1 $ PCSrc $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 5 % shamt [4:0] $end
$var wire 5 & rt_EX [4:0] $end
$var wire 5 ' rt [4:0] $end
$var wire 5 ( rs_EX [4:0] $end
$var wire 5 ) rs [4:0] $end
$var wire 5 * rfile_wn_MEM [4:0] $end
$var wire 5 + rfile_wn_EX [4:0] $end
$var wire 5 , rfile_wn [4:0] $end
$var wire 32 - rfile_wd [31:0] $end
$var wire 32 . rfile_rd2_MEM [31:0] $end
$var wire 32 / rfile_rd2_EX [31:0] $end
$var wire 32 0 rfile_rd2 [31:0] $end
$var wire 32 1 rfile_rd1_EX [31:0] $end
$var wire 32 2 rfile_rd1 [31:0] $end
$var wire 5 3 rd_EX [4:0] $end
$var wire 5 4 rd [4:0] $end
$var wire 32 5 pc_next [31:0] $end
$var wire 32 6 pc_incr [31:0] $end
$var wire 32 7 pc_WB [31:0] $end
$var wire 32 8 pc_MEM [31:0] $end
$var wire 32 9 pc_ID [31:0] $end
$var wire 32 : pc_EX [31:0] $end
$var wire 32 ; pc [31:0] $end
$var wire 6 < opcode [5:0] $end
$var wire 32 = muxb_out [31:0] $end
$var wire 32 > muxa_out [31:0] $end
$var wire 7 ? maxcount_ID [6:0] $end
$var wire 7 @ maxcount_EX [6:0] $end
$var wire 7 A maxcount [6:0] $end
$var wire 26 B jumpoffset [25:0] $end
$var wire 32 C jump_addr [31:0] $end
$var wire 32 D instr_IF2 [31:0] $end
$var wire 32 E instr_IF [31:0] $end
$var wire 32 F instr_ID [31:0] $end
$var wire 32 G instr [31:0] $end
$var wire 16 H immed [15:0] $end
$var wire 6 I funct_EX [5:0] $end
$var wire 6 J funct [5:0] $end
$var wire 2 K forB [1:0] $end
$var wire 2 L forA [1:0] $end
$var wire 32 M extend_immed_EX [31:0] $end
$var wire 32 N extend_immed [31:0] $end
$var wire 1 O en_pc_ID $end
$var wire 1 P en_pc_EX $end
$var wire 1 Q en_pc $end
$var wire 32 R dmem_rdata_WB [31:0] $end
$var wire 32 S dmem_rdata [31:0] $end
$var wire 32 T branch_addr [31:0] $end
$var wire 32 U b_tgt [31:0] $end
$var wire 32 V b_offset [31:0] $end
$var wire 32 W alu_out_WB [31:0] $end
$var wire 32 X alu_out_MEM [31:0] $end
$var wire 32 Y alu_out [31:0] $end
$var wire 32 Z alu_b [31:0] $end
$var wire 32 [ alu_ans [31:0] $end
$var wire 1 \ Zero $end
$var wire 1 ] RegWrite_WB $end
$var wire 1 ^ RegWrite_MEM $end
$var wire 1 _ RegWrite_EX $end
$var wire 1 ` RegWrite $end
$var wire 2 a RegDst_EX [1:0] $end
$var wire 2 b RegDst [1:0] $end
$var wire 3 c Operation [2:0] $end
$var wire 1 d NOPSrc $end
$var wire 1 e Multu $end
$var wire 64 f MulAns [63:0] $end
$var wire 2 g MemtoReg_WB [1:0] $end
$var wire 2 h MemtoReg_MEM [1:0] $end
$var wire 2 i MemtoReg_EX [1:0] $end
$var wire 2 j MemtoReg [1:0] $end
$var wire 1 k MemWrite_MEM $end
$var wire 1 l MemWrite_EX $end
$var wire 1 m MemWrite $end
$var wire 1 n MemRead_MEM $end
$var wire 1 o MemRead_EX $end
$var wire 1 p MemRead $end
$var wire 32 q LoOut [31:0] $end
$var wire 1 r Jump_MEM $end
$var wire 1 s Jump_EX $end
$var wire 1 t Jump $end
$var wire 32 u HiOut [31:0] $end
$var wire 1 v Branch $end
$var wire 1 w BNE_EX $end
$var wire 2 x ALU_Out_Sel [1:0] $end
$var wire 1 y ALUSrc_EX $end
$var wire 1 z ALUSrc $end
$var wire 2 { ALUOp_EX [1:0] $end
$var wire 2 | ALUOp [1:0] $end
$scope module ALU $end
$var wire 1 ! clk $end
$var wire 1 } less $end
$var wire 1 " reset $end
$var wire 32 ~ temp [31:0] $end
$var wire 32 !" shift_result [31:0] $end
$var wire 1 "" set $end
$var wire 32 #" dataOut [31:0] $end
$var wire 32 $" dataB [31:0] $end
$var wire 32 %" dataA [31:0] $end
$var wire 31 &" c [30:0] $end
$var wire 3 '" Signal [2:0] $end
$scope module Shifter $end
$var wire 32 (" s4 [31:0] $end
$var wire 32 )" s3 [31:0] $end
$var wire 32 *" s2 [31:0] $end
$var wire 32 +" s1 [31:0] $end
$var wire 32 ," dataOut [31:0] $end
$var wire 32 -" dataB [31:0] $end
$var wire 32 ." dataA [31:0] $end
$scope module shift0 $end
$var wire 32 /" a1 [31:0] $end
$var wire 1 0" select $end
$var wire 32 1" x [31:0] $end
$var wire 32 2" a0 [31:0] $end
$upscope $end
$scope module shift1 $end
$var wire 32 3" a0 [31:0] $end
$var wire 32 4" a1 [31:0] $end
$var wire 1 5" select $end
$var wire 32 6" x [31:0] $end
$upscope $end
$scope module shift2 $end
$var wire 32 7" a0 [31:0] $end
$var wire 32 8" a1 [31:0] $end
$var wire 1 9" select $end
$var wire 32 :" x [31:0] $end
$upscope $end
$scope module shift3 $end
$var wire 32 ;" a0 [31:0] $end
$var wire 32 <" a1 [31:0] $end
$var wire 1 =" select $end
$var wire 32 >" x [31:0] $end
$upscope $end
$scope module shift4 $end
$var wire 32 ?" a0 [31:0] $end
$var wire 32 @" a1 [31:0] $end
$var wire 1 A" select $end
$var wire 32 B" x [31:0] $end
$upscope $end
$upscope $end
$scope module alu0 $end
$var wire 1 C" a $end
$var wire 1 D" b $end
$var wire 1 E" cin $end
$var wire 1 F" e0 $end
$var wire 1 G" e1 $end
$var wire 1 H" e3 $end
$var wire 1 I" inv $end
$var wire 2 J" sel [1:0] $end
$var wire 1 K" set $end
$var wire 1 L" xb $end
$var wire 1 M" sum $end
$var wire 1 "" less $end
$var wire 1 N" e2 $end
$var wire 1 O" cout $end
$scope module fa $end
$var wire 1 C" a $end
$var wire 1 L" b $end
$var wire 1 E" c $end
$var wire 1 O" cout $end
$var wire 1 P" e1 $end
$var wire 1 Q" e2 $end
$var wire 1 R" e3 $end
$var wire 1 N" sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 F" e0 $end
$var wire 1 G" e1 $end
$var wire 1 N" e2 $end
$var wire 1 H" e3 $end
$var wire 2 S" op [1:0] $end
$var wire 1 M" out $end
$upscope $end
$upscope $end
$scope module alu1 $end
$var wire 1 T" a $end
$var wire 1 U" b $end
$var wire 1 V" cin $end
$var wire 1 W" e0 $end
$var wire 1 X" e1 $end
$var wire 1 Y" e3 $end
$var wire 1 Z" inv $end
$var wire 1 } less $end
$var wire 2 [" sel [1:0] $end
$var wire 1 \" set $end
$var wire 1 ]" xb $end
$var wire 1 ^" sum $end
$var wire 1 _" e2 $end
$var wire 1 `" cout $end
$scope module fa $end
$var wire 1 T" a $end
$var wire 1 ]" b $end
$var wire 1 V" c $end
$var wire 1 `" cout $end
$var wire 1 a" e1 $end
$var wire 1 b" e2 $end
$var wire 1 c" e3 $end
$var wire 1 _" sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 W" e0 $end
$var wire 1 X" e1 $end
$var wire 1 _" e2 $end
$var wire 1 Y" e3 $end
$var wire 2 d" op [1:0] $end
$var wire 1 ^" out $end
$upscope $end
$upscope $end
$scope module alu10 $end
$var wire 1 e" a $end
$var wire 1 f" b $end
$var wire 1 g" cin $end
$var wire 1 h" e0 $end
$var wire 1 i" e1 $end
$var wire 1 j" e3 $end
$var wire 1 k" inv $end
$var wire 1 } less $end
$var wire 2 l" sel [1:0] $end
$var wire 1 m" set $end
$var wire 1 n" xb $end
$var wire 1 o" sum $end
$var wire 1 p" e2 $end
$var wire 1 q" cout $end
$scope module fa $end
$var wire 1 e" a $end
$var wire 1 n" b $end
$var wire 1 g" c $end
$var wire 1 q" cout $end
$var wire 1 r" e1 $end
$var wire 1 s" e2 $end
$var wire 1 t" e3 $end
$var wire 1 p" sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 h" e0 $end
$var wire 1 i" e1 $end
$var wire 1 p" e2 $end
$var wire 1 j" e3 $end
$var wire 2 u" op [1:0] $end
$var wire 1 o" out $end
$upscope $end
$upscope $end
$scope module alu11 $end
$var wire 1 v" a $end
$var wire 1 w" b $end
$var wire 1 x" cin $end
$var wire 1 y" e0 $end
$var wire 1 z" e1 $end
$var wire 1 {" e3 $end
$var wire 1 |" inv $end
$var wire 1 } less $end
$var wire 2 }" sel [1:0] $end
$var wire 1 ~" set $end
$var wire 1 !# xb $end
$var wire 1 "# sum $end
$var wire 1 ## e2 $end
$var wire 1 $# cout $end
$scope module fa $end
$var wire 1 v" a $end
$var wire 1 !# b $end
$var wire 1 x" c $end
$var wire 1 $# cout $end
$var wire 1 %# e1 $end
$var wire 1 &# e2 $end
$var wire 1 '# e3 $end
$var wire 1 ## sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 y" e0 $end
$var wire 1 z" e1 $end
$var wire 1 ## e2 $end
$var wire 1 {" e3 $end
$var wire 2 (# op [1:0] $end
$var wire 1 "# out $end
$upscope $end
$upscope $end
$scope module alu12 $end
$var wire 1 )# a $end
$var wire 1 *# b $end
$var wire 1 +# cin $end
$var wire 1 ,# e0 $end
$var wire 1 -# e1 $end
$var wire 1 .# e3 $end
$var wire 1 /# inv $end
$var wire 1 } less $end
$var wire 2 0# sel [1:0] $end
$var wire 1 1# set $end
$var wire 1 2# xb $end
$var wire 1 3# sum $end
$var wire 1 4# e2 $end
$var wire 1 5# cout $end
$scope module fa $end
$var wire 1 )# a $end
$var wire 1 2# b $end
$var wire 1 +# c $end
$var wire 1 5# cout $end
$var wire 1 6# e1 $end
$var wire 1 7# e2 $end
$var wire 1 8# e3 $end
$var wire 1 4# sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 ,# e0 $end
$var wire 1 -# e1 $end
$var wire 1 4# e2 $end
$var wire 1 .# e3 $end
$var wire 2 9# op [1:0] $end
$var wire 1 3# out $end
$upscope $end
$upscope $end
$scope module alu13 $end
$var wire 1 :# a $end
$var wire 1 ;# b $end
$var wire 1 <# cin $end
$var wire 1 =# e0 $end
$var wire 1 ># e1 $end
$var wire 1 ?# e3 $end
$var wire 1 @# inv $end
$var wire 1 } less $end
$var wire 2 A# sel [1:0] $end
$var wire 1 B# set $end
$var wire 1 C# xb $end
$var wire 1 D# sum $end
$var wire 1 E# e2 $end
$var wire 1 F# cout $end
$scope module fa $end
$var wire 1 :# a $end
$var wire 1 C# b $end
$var wire 1 <# c $end
$var wire 1 F# cout $end
$var wire 1 G# e1 $end
$var wire 1 H# e2 $end
$var wire 1 I# e3 $end
$var wire 1 E# sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 =# e0 $end
$var wire 1 ># e1 $end
$var wire 1 E# e2 $end
$var wire 1 ?# e3 $end
$var wire 2 J# op [1:0] $end
$var wire 1 D# out $end
$upscope $end
$upscope $end
$scope module alu14 $end
$var wire 1 K# a $end
$var wire 1 L# b $end
$var wire 1 M# cin $end
$var wire 1 N# e0 $end
$var wire 1 O# e1 $end
$var wire 1 P# e3 $end
$var wire 1 Q# inv $end
$var wire 1 } less $end
$var wire 2 R# sel [1:0] $end
$var wire 1 S# set $end
$var wire 1 T# xb $end
$var wire 1 U# sum $end
$var wire 1 V# e2 $end
$var wire 1 W# cout $end
$scope module fa $end
$var wire 1 K# a $end
$var wire 1 T# b $end
$var wire 1 M# c $end
$var wire 1 W# cout $end
$var wire 1 X# e1 $end
$var wire 1 Y# e2 $end
$var wire 1 Z# e3 $end
$var wire 1 V# sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 N# e0 $end
$var wire 1 O# e1 $end
$var wire 1 V# e2 $end
$var wire 1 P# e3 $end
$var wire 2 [# op [1:0] $end
$var wire 1 U# out $end
$upscope $end
$upscope $end
$scope module alu15 $end
$var wire 1 \# a $end
$var wire 1 ]# b $end
$var wire 1 ^# cin $end
$var wire 1 _# e0 $end
$var wire 1 `# e1 $end
$var wire 1 a# e3 $end
$var wire 1 b# inv $end
$var wire 1 } less $end
$var wire 2 c# sel [1:0] $end
$var wire 1 d# set $end
$var wire 1 e# xb $end
$var wire 1 f# sum $end
$var wire 1 g# e2 $end
$var wire 1 h# cout $end
$scope module fa $end
$var wire 1 \# a $end
$var wire 1 e# b $end
$var wire 1 ^# c $end
$var wire 1 h# cout $end
$var wire 1 i# e1 $end
$var wire 1 j# e2 $end
$var wire 1 k# e3 $end
$var wire 1 g# sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 _# e0 $end
$var wire 1 `# e1 $end
$var wire 1 g# e2 $end
$var wire 1 a# e3 $end
$var wire 2 l# op [1:0] $end
$var wire 1 f# out $end
$upscope $end
$upscope $end
$scope module alu16 $end
$var wire 1 m# a $end
$var wire 1 n# b $end
$var wire 1 o# cin $end
$var wire 1 p# e0 $end
$var wire 1 q# e1 $end
$var wire 1 r# e3 $end
$var wire 1 s# inv $end
$var wire 1 } less $end
$var wire 2 t# sel [1:0] $end
$var wire 1 u# set $end
$var wire 1 v# xb $end
$var wire 1 w# sum $end
$var wire 1 x# e2 $end
$var wire 1 y# cout $end
$scope module fa $end
$var wire 1 m# a $end
$var wire 1 v# b $end
$var wire 1 o# c $end
$var wire 1 y# cout $end
$var wire 1 z# e1 $end
$var wire 1 {# e2 $end
$var wire 1 |# e3 $end
$var wire 1 x# sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 p# e0 $end
$var wire 1 q# e1 $end
$var wire 1 x# e2 $end
$var wire 1 r# e3 $end
$var wire 2 }# op [1:0] $end
$var wire 1 w# out $end
$upscope $end
$upscope $end
$scope module alu17 $end
$var wire 1 ~# a $end
$var wire 1 !$ b $end
$var wire 1 "$ cin $end
$var wire 1 #$ e0 $end
$var wire 1 $$ e1 $end
$var wire 1 %$ e3 $end
$var wire 1 &$ inv $end
$var wire 1 } less $end
$var wire 2 '$ sel [1:0] $end
$var wire 1 ($ set $end
$var wire 1 )$ xb $end
$var wire 1 *$ sum $end
$var wire 1 +$ e2 $end
$var wire 1 ,$ cout $end
$scope module fa $end
$var wire 1 ~# a $end
$var wire 1 )$ b $end
$var wire 1 "$ c $end
$var wire 1 ,$ cout $end
$var wire 1 -$ e1 $end
$var wire 1 .$ e2 $end
$var wire 1 /$ e3 $end
$var wire 1 +$ sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 #$ e0 $end
$var wire 1 $$ e1 $end
$var wire 1 +$ e2 $end
$var wire 1 %$ e3 $end
$var wire 2 0$ op [1:0] $end
$var wire 1 *$ out $end
$upscope $end
$upscope $end
$scope module alu18 $end
$var wire 1 1$ a $end
$var wire 1 2$ b $end
$var wire 1 3$ cin $end
$var wire 1 4$ e0 $end
$var wire 1 5$ e1 $end
$var wire 1 6$ e3 $end
$var wire 1 7$ inv $end
$var wire 1 } less $end
$var wire 2 8$ sel [1:0] $end
$var wire 1 9$ set $end
$var wire 1 :$ xb $end
$var wire 1 ;$ sum $end
$var wire 1 <$ e2 $end
$var wire 1 =$ cout $end
$scope module fa $end
$var wire 1 1$ a $end
$var wire 1 :$ b $end
$var wire 1 3$ c $end
$var wire 1 =$ cout $end
$var wire 1 >$ e1 $end
$var wire 1 ?$ e2 $end
$var wire 1 @$ e3 $end
$var wire 1 <$ sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 4$ e0 $end
$var wire 1 5$ e1 $end
$var wire 1 <$ e2 $end
$var wire 1 6$ e3 $end
$var wire 2 A$ op [1:0] $end
$var wire 1 ;$ out $end
$upscope $end
$upscope $end
$scope module alu19 $end
$var wire 1 B$ a $end
$var wire 1 C$ b $end
$var wire 1 D$ cin $end
$var wire 1 E$ e0 $end
$var wire 1 F$ e1 $end
$var wire 1 G$ e3 $end
$var wire 1 H$ inv $end
$var wire 1 } less $end
$var wire 2 I$ sel [1:0] $end
$var wire 1 J$ set $end
$var wire 1 K$ xb $end
$var wire 1 L$ sum $end
$var wire 1 M$ e2 $end
$var wire 1 N$ cout $end
$scope module fa $end
$var wire 1 B$ a $end
$var wire 1 K$ b $end
$var wire 1 D$ c $end
$var wire 1 N$ cout $end
$var wire 1 O$ e1 $end
$var wire 1 P$ e2 $end
$var wire 1 Q$ e3 $end
$var wire 1 M$ sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 E$ e0 $end
$var wire 1 F$ e1 $end
$var wire 1 M$ e2 $end
$var wire 1 G$ e3 $end
$var wire 2 R$ op [1:0] $end
$var wire 1 L$ out $end
$upscope $end
$upscope $end
$scope module alu2 $end
$var wire 1 S$ a $end
$var wire 1 T$ b $end
$var wire 1 U$ cin $end
$var wire 1 V$ e0 $end
$var wire 1 W$ e1 $end
$var wire 1 X$ e3 $end
$var wire 1 Y$ inv $end
$var wire 1 } less $end
$var wire 2 Z$ sel [1:0] $end
$var wire 1 [$ set $end
$var wire 1 \$ xb $end
$var wire 1 ]$ sum $end
$var wire 1 ^$ e2 $end
$var wire 1 _$ cout $end
$scope module fa $end
$var wire 1 S$ a $end
$var wire 1 \$ b $end
$var wire 1 U$ c $end
$var wire 1 _$ cout $end
$var wire 1 `$ e1 $end
$var wire 1 a$ e2 $end
$var wire 1 b$ e3 $end
$var wire 1 ^$ sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 V$ e0 $end
$var wire 1 W$ e1 $end
$var wire 1 ^$ e2 $end
$var wire 1 X$ e3 $end
$var wire 2 c$ op [1:0] $end
$var wire 1 ]$ out $end
$upscope $end
$upscope $end
$scope module alu20 $end
$var wire 1 d$ a $end
$var wire 1 e$ b $end
$var wire 1 f$ cin $end
$var wire 1 g$ e0 $end
$var wire 1 h$ e1 $end
$var wire 1 i$ e3 $end
$var wire 1 j$ inv $end
$var wire 1 } less $end
$var wire 2 k$ sel [1:0] $end
$var wire 1 l$ set $end
$var wire 1 m$ xb $end
$var wire 1 n$ sum $end
$var wire 1 o$ e2 $end
$var wire 1 p$ cout $end
$scope module fa $end
$var wire 1 d$ a $end
$var wire 1 m$ b $end
$var wire 1 f$ c $end
$var wire 1 p$ cout $end
$var wire 1 q$ e1 $end
$var wire 1 r$ e2 $end
$var wire 1 s$ e3 $end
$var wire 1 o$ sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 g$ e0 $end
$var wire 1 h$ e1 $end
$var wire 1 o$ e2 $end
$var wire 1 i$ e3 $end
$var wire 2 t$ op [1:0] $end
$var wire 1 n$ out $end
$upscope $end
$upscope $end
$scope module alu21 $end
$var wire 1 u$ a $end
$var wire 1 v$ b $end
$var wire 1 w$ cin $end
$var wire 1 x$ e0 $end
$var wire 1 y$ e1 $end
$var wire 1 z$ e3 $end
$var wire 1 {$ inv $end
$var wire 1 } less $end
$var wire 2 |$ sel [1:0] $end
$var wire 1 }$ set $end
$var wire 1 ~$ xb $end
$var wire 1 !% sum $end
$var wire 1 "% e2 $end
$var wire 1 #% cout $end
$scope module fa $end
$var wire 1 u$ a $end
$var wire 1 ~$ b $end
$var wire 1 w$ c $end
$var wire 1 #% cout $end
$var wire 1 $% e1 $end
$var wire 1 %% e2 $end
$var wire 1 &% e3 $end
$var wire 1 "% sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 x$ e0 $end
$var wire 1 y$ e1 $end
$var wire 1 "% e2 $end
$var wire 1 z$ e3 $end
$var wire 2 '% op [1:0] $end
$var wire 1 !% out $end
$upscope $end
$upscope $end
$scope module alu22 $end
$var wire 1 (% a $end
$var wire 1 )% b $end
$var wire 1 *% cin $end
$var wire 1 +% e0 $end
$var wire 1 ,% e1 $end
$var wire 1 -% e3 $end
$var wire 1 .% inv $end
$var wire 1 } less $end
$var wire 2 /% sel [1:0] $end
$var wire 1 0% set $end
$var wire 1 1% xb $end
$var wire 1 2% sum $end
$var wire 1 3% e2 $end
$var wire 1 4% cout $end
$scope module fa $end
$var wire 1 (% a $end
$var wire 1 1% b $end
$var wire 1 *% c $end
$var wire 1 4% cout $end
$var wire 1 5% e1 $end
$var wire 1 6% e2 $end
$var wire 1 7% e3 $end
$var wire 1 3% sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 +% e0 $end
$var wire 1 ,% e1 $end
$var wire 1 3% e2 $end
$var wire 1 -% e3 $end
$var wire 2 8% op [1:0] $end
$var wire 1 2% out $end
$upscope $end
$upscope $end
$scope module alu23 $end
$var wire 1 9% a $end
$var wire 1 :% b $end
$var wire 1 ;% cin $end
$var wire 1 <% e0 $end
$var wire 1 =% e1 $end
$var wire 1 >% e3 $end
$var wire 1 ?% inv $end
$var wire 1 } less $end
$var wire 2 @% sel [1:0] $end
$var wire 1 A% set $end
$var wire 1 B% xb $end
$var wire 1 C% sum $end
$var wire 1 D% e2 $end
$var wire 1 E% cout $end
$scope module fa $end
$var wire 1 9% a $end
$var wire 1 B% b $end
$var wire 1 ;% c $end
$var wire 1 E% cout $end
$var wire 1 F% e1 $end
$var wire 1 G% e2 $end
$var wire 1 H% e3 $end
$var wire 1 D% sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 <% e0 $end
$var wire 1 =% e1 $end
$var wire 1 D% e2 $end
$var wire 1 >% e3 $end
$var wire 2 I% op [1:0] $end
$var wire 1 C% out $end
$upscope $end
$upscope $end
$scope module alu24 $end
$var wire 1 J% a $end
$var wire 1 K% b $end
$var wire 1 L% cin $end
$var wire 1 M% e0 $end
$var wire 1 N% e1 $end
$var wire 1 O% e3 $end
$var wire 1 P% inv $end
$var wire 1 } less $end
$var wire 2 Q% sel [1:0] $end
$var wire 1 R% set $end
$var wire 1 S% xb $end
$var wire 1 T% sum $end
$var wire 1 U% e2 $end
$var wire 1 V% cout $end
$scope module fa $end
$var wire 1 J% a $end
$var wire 1 S% b $end
$var wire 1 L% c $end
$var wire 1 V% cout $end
$var wire 1 W% e1 $end
$var wire 1 X% e2 $end
$var wire 1 Y% e3 $end
$var wire 1 U% sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 M% e0 $end
$var wire 1 N% e1 $end
$var wire 1 U% e2 $end
$var wire 1 O% e3 $end
$var wire 2 Z% op [1:0] $end
$var wire 1 T% out $end
$upscope $end
$upscope $end
$scope module alu25 $end
$var wire 1 [% a $end
$var wire 1 \% b $end
$var wire 1 ]% cin $end
$var wire 1 ^% e0 $end
$var wire 1 _% e1 $end
$var wire 1 `% e3 $end
$var wire 1 a% inv $end
$var wire 1 } less $end
$var wire 2 b% sel [1:0] $end
$var wire 1 c% set $end
$var wire 1 d% xb $end
$var wire 1 e% sum $end
$var wire 1 f% e2 $end
$var wire 1 g% cout $end
$scope module fa $end
$var wire 1 [% a $end
$var wire 1 d% b $end
$var wire 1 ]% c $end
$var wire 1 g% cout $end
$var wire 1 h% e1 $end
$var wire 1 i% e2 $end
$var wire 1 j% e3 $end
$var wire 1 f% sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 ^% e0 $end
$var wire 1 _% e1 $end
$var wire 1 f% e2 $end
$var wire 1 `% e3 $end
$var wire 2 k% op [1:0] $end
$var wire 1 e% out $end
$upscope $end
$upscope $end
$scope module alu26 $end
$var wire 1 l% a $end
$var wire 1 m% b $end
$var wire 1 n% cin $end
$var wire 1 o% e0 $end
$var wire 1 p% e1 $end
$var wire 1 q% e3 $end
$var wire 1 r% inv $end
$var wire 1 } less $end
$var wire 2 s% sel [1:0] $end
$var wire 1 t% set $end
$var wire 1 u% xb $end
$var wire 1 v% sum $end
$var wire 1 w% e2 $end
$var wire 1 x% cout $end
$scope module fa $end
$var wire 1 l% a $end
$var wire 1 u% b $end
$var wire 1 n% c $end
$var wire 1 x% cout $end
$var wire 1 y% e1 $end
$var wire 1 z% e2 $end
$var wire 1 {% e3 $end
$var wire 1 w% sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 o% e0 $end
$var wire 1 p% e1 $end
$var wire 1 w% e2 $end
$var wire 1 q% e3 $end
$var wire 2 |% op [1:0] $end
$var wire 1 v% out $end
$upscope $end
$upscope $end
$scope module alu27 $end
$var wire 1 }% a $end
$var wire 1 ~% b $end
$var wire 1 !& cin $end
$var wire 1 "& e0 $end
$var wire 1 #& e1 $end
$var wire 1 $& e3 $end
$var wire 1 %& inv $end
$var wire 1 } less $end
$var wire 2 && sel [1:0] $end
$var wire 1 '& set $end
$var wire 1 (& xb $end
$var wire 1 )& sum $end
$var wire 1 *& e2 $end
$var wire 1 +& cout $end
$scope module fa $end
$var wire 1 }% a $end
$var wire 1 (& b $end
$var wire 1 !& c $end
$var wire 1 +& cout $end
$var wire 1 ,& e1 $end
$var wire 1 -& e2 $end
$var wire 1 .& e3 $end
$var wire 1 *& sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 "& e0 $end
$var wire 1 #& e1 $end
$var wire 1 *& e2 $end
$var wire 1 $& e3 $end
$var wire 2 /& op [1:0] $end
$var wire 1 )& out $end
$upscope $end
$upscope $end
$scope module alu28 $end
$var wire 1 0& a $end
$var wire 1 1& b $end
$var wire 1 2& cin $end
$var wire 1 3& e0 $end
$var wire 1 4& e1 $end
$var wire 1 5& e3 $end
$var wire 1 6& inv $end
$var wire 1 } less $end
$var wire 2 7& sel [1:0] $end
$var wire 1 8& set $end
$var wire 1 9& xb $end
$var wire 1 :& sum $end
$var wire 1 ;& e2 $end
$var wire 1 <& cout $end
$scope module fa $end
$var wire 1 0& a $end
$var wire 1 9& b $end
$var wire 1 2& c $end
$var wire 1 <& cout $end
$var wire 1 =& e1 $end
$var wire 1 >& e2 $end
$var wire 1 ?& e3 $end
$var wire 1 ;& sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 3& e0 $end
$var wire 1 4& e1 $end
$var wire 1 ;& e2 $end
$var wire 1 5& e3 $end
$var wire 2 @& op [1:0] $end
$var wire 1 :& out $end
$upscope $end
$upscope $end
$scope module alu29 $end
$var wire 1 A& a $end
$var wire 1 B& b $end
$var wire 1 C& cin $end
$var wire 1 D& e0 $end
$var wire 1 E& e1 $end
$var wire 1 F& e3 $end
$var wire 1 G& inv $end
$var wire 1 } less $end
$var wire 2 H& sel [1:0] $end
$var wire 1 I& set $end
$var wire 1 J& xb $end
$var wire 1 K& sum $end
$var wire 1 L& e2 $end
$var wire 1 M& cout $end
$scope module fa $end
$var wire 1 A& a $end
$var wire 1 J& b $end
$var wire 1 C& c $end
$var wire 1 M& cout $end
$var wire 1 N& e1 $end
$var wire 1 O& e2 $end
$var wire 1 P& e3 $end
$var wire 1 L& sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 D& e0 $end
$var wire 1 E& e1 $end
$var wire 1 L& e2 $end
$var wire 1 F& e3 $end
$var wire 2 Q& op [1:0] $end
$var wire 1 K& out $end
$upscope $end
$upscope $end
$scope module alu3 $end
$var wire 1 R& a $end
$var wire 1 S& b $end
$var wire 1 T& cin $end
$var wire 1 U& e0 $end
$var wire 1 V& e1 $end
$var wire 1 W& e3 $end
$var wire 1 X& inv $end
$var wire 1 } less $end
$var wire 2 Y& sel [1:0] $end
$var wire 1 Z& set $end
$var wire 1 [& xb $end
$var wire 1 \& sum $end
$var wire 1 ]& e2 $end
$var wire 1 ^& cout $end
$scope module fa $end
$var wire 1 R& a $end
$var wire 1 [& b $end
$var wire 1 T& c $end
$var wire 1 ^& cout $end
$var wire 1 _& e1 $end
$var wire 1 `& e2 $end
$var wire 1 a& e3 $end
$var wire 1 ]& sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 U& e0 $end
$var wire 1 V& e1 $end
$var wire 1 ]& e2 $end
$var wire 1 W& e3 $end
$var wire 2 b& op [1:0] $end
$var wire 1 \& out $end
$upscope $end
$upscope $end
$scope module alu30 $end
$var wire 1 c& a $end
$var wire 1 d& b $end
$var wire 1 e& cin $end
$var wire 1 f& e0 $end
$var wire 1 g& e1 $end
$var wire 1 h& e3 $end
$var wire 1 i& inv $end
$var wire 1 } less $end
$var wire 2 j& sel [1:0] $end
$var wire 1 k& set $end
$var wire 1 l& xb $end
$var wire 1 m& sum $end
$var wire 1 n& e2 $end
$var wire 1 o& cout $end
$scope module fa $end
$var wire 1 c& a $end
$var wire 1 l& b $end
$var wire 1 e& c $end
$var wire 1 o& cout $end
$var wire 1 p& e1 $end
$var wire 1 q& e2 $end
$var wire 1 r& e3 $end
$var wire 1 n& sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 f& e0 $end
$var wire 1 g& e1 $end
$var wire 1 n& e2 $end
$var wire 1 h& e3 $end
$var wire 2 s& op [1:0] $end
$var wire 1 m& out $end
$upscope $end
$upscope $end
$scope module alu31 $end
$var wire 1 t& a $end
$var wire 1 u& b $end
$var wire 1 v& cin $end
$var wire 1 w& e0 $end
$var wire 1 x& e1 $end
$var wire 1 y& e3 $end
$var wire 1 z& inv $end
$var wire 1 } less $end
$var wire 2 {& sel [1:0] $end
$var wire 1 "" set $end
$var wire 1 |& xb $end
$var wire 1 }& sum $end
$var wire 1 ~& e2 $end
$var wire 1 !' cout $end
$scope module fa $end
$var wire 1 t& a $end
$var wire 1 |& b $end
$var wire 1 v& c $end
$var wire 1 !' cout $end
$var wire 1 "' e1 $end
$var wire 1 #' e2 $end
$var wire 1 $' e3 $end
$var wire 1 ~& sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 w& e0 $end
$var wire 1 x& e1 $end
$var wire 1 ~& e2 $end
$var wire 1 y& e3 $end
$var wire 2 %' op [1:0] $end
$var wire 1 }& out $end
$upscope $end
$upscope $end
$scope module alu4 $end
$var wire 1 &' a $end
$var wire 1 '' b $end
$var wire 1 (' cin $end
$var wire 1 )' e0 $end
$var wire 1 *' e1 $end
$var wire 1 +' e3 $end
$var wire 1 ,' inv $end
$var wire 1 } less $end
$var wire 2 -' sel [1:0] $end
$var wire 1 .' set $end
$var wire 1 /' xb $end
$var wire 1 0' sum $end
$var wire 1 1' e2 $end
$var wire 1 2' cout $end
$scope module fa $end
$var wire 1 &' a $end
$var wire 1 /' b $end
$var wire 1 (' c $end
$var wire 1 2' cout $end
$var wire 1 3' e1 $end
$var wire 1 4' e2 $end
$var wire 1 5' e3 $end
$var wire 1 1' sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 )' e0 $end
$var wire 1 *' e1 $end
$var wire 1 1' e2 $end
$var wire 1 +' e3 $end
$var wire 2 6' op [1:0] $end
$var wire 1 0' out $end
$upscope $end
$upscope $end
$scope module alu5 $end
$var wire 1 7' a $end
$var wire 1 8' b $end
$var wire 1 9' cin $end
$var wire 1 :' e0 $end
$var wire 1 ;' e1 $end
$var wire 1 <' e3 $end
$var wire 1 =' inv $end
$var wire 1 } less $end
$var wire 2 >' sel [1:0] $end
$var wire 1 ?' set $end
$var wire 1 @' xb $end
$var wire 1 A' sum $end
$var wire 1 B' e2 $end
$var wire 1 C' cout $end
$scope module fa $end
$var wire 1 7' a $end
$var wire 1 @' b $end
$var wire 1 9' c $end
$var wire 1 C' cout $end
$var wire 1 D' e1 $end
$var wire 1 E' e2 $end
$var wire 1 F' e3 $end
$var wire 1 B' sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 :' e0 $end
$var wire 1 ;' e1 $end
$var wire 1 B' e2 $end
$var wire 1 <' e3 $end
$var wire 2 G' op [1:0] $end
$var wire 1 A' out $end
$upscope $end
$upscope $end
$scope module alu6 $end
$var wire 1 H' a $end
$var wire 1 I' b $end
$var wire 1 J' cin $end
$var wire 1 K' e0 $end
$var wire 1 L' e1 $end
$var wire 1 M' e3 $end
$var wire 1 N' inv $end
$var wire 1 } less $end
$var wire 2 O' sel [1:0] $end
$var wire 1 P' set $end
$var wire 1 Q' xb $end
$var wire 1 R' sum $end
$var wire 1 S' e2 $end
$var wire 1 T' cout $end
$scope module fa $end
$var wire 1 H' a $end
$var wire 1 Q' b $end
$var wire 1 J' c $end
$var wire 1 T' cout $end
$var wire 1 U' e1 $end
$var wire 1 V' e2 $end
$var wire 1 W' e3 $end
$var wire 1 S' sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 K' e0 $end
$var wire 1 L' e1 $end
$var wire 1 S' e2 $end
$var wire 1 M' e3 $end
$var wire 2 X' op [1:0] $end
$var wire 1 R' out $end
$upscope $end
$upscope $end
$scope module alu7 $end
$var wire 1 Y' a $end
$var wire 1 Z' b $end
$var wire 1 [' cin $end
$var wire 1 \' e0 $end
$var wire 1 ]' e1 $end
$var wire 1 ^' e3 $end
$var wire 1 _' inv $end
$var wire 1 } less $end
$var wire 2 `' sel [1:0] $end
$var wire 1 a' set $end
$var wire 1 b' xb $end
$var wire 1 c' sum $end
$var wire 1 d' e2 $end
$var wire 1 e' cout $end
$scope module fa $end
$var wire 1 Y' a $end
$var wire 1 b' b $end
$var wire 1 [' c $end
$var wire 1 e' cout $end
$var wire 1 f' e1 $end
$var wire 1 g' e2 $end
$var wire 1 h' e3 $end
$var wire 1 d' sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 \' e0 $end
$var wire 1 ]' e1 $end
$var wire 1 d' e2 $end
$var wire 1 ^' e3 $end
$var wire 2 i' op [1:0] $end
$var wire 1 c' out $end
$upscope $end
$upscope $end
$scope module alu8 $end
$var wire 1 j' a $end
$var wire 1 k' b $end
$var wire 1 l' cin $end
$var wire 1 m' e0 $end
$var wire 1 n' e1 $end
$var wire 1 o' e3 $end
$var wire 1 p' inv $end
$var wire 1 } less $end
$var wire 2 q' sel [1:0] $end
$var wire 1 r' set $end
$var wire 1 s' xb $end
$var wire 1 t' sum $end
$var wire 1 u' e2 $end
$var wire 1 v' cout $end
$scope module fa $end
$var wire 1 j' a $end
$var wire 1 s' b $end
$var wire 1 l' c $end
$var wire 1 v' cout $end
$var wire 1 w' e1 $end
$var wire 1 x' e2 $end
$var wire 1 y' e3 $end
$var wire 1 u' sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 m' e0 $end
$var wire 1 n' e1 $end
$var wire 1 u' e2 $end
$var wire 1 o' e3 $end
$var wire 2 z' op [1:0] $end
$var wire 1 t' out $end
$upscope $end
$upscope $end
$scope module alu9 $end
$var wire 1 {' a $end
$var wire 1 |' b $end
$var wire 1 }' cin $end
$var wire 1 ~' e0 $end
$var wire 1 !( e1 $end
$var wire 1 "( e3 $end
$var wire 1 #( inv $end
$var wire 1 } less $end
$var wire 2 $( sel [1:0] $end
$var wire 1 %( set $end
$var wire 1 &( xb $end
$var wire 1 '( sum $end
$var wire 1 (( e2 $end
$var wire 1 )( cout $end
$scope module fa $end
$var wire 1 {' a $end
$var wire 1 &( b $end
$var wire 1 }' c $end
$var wire 1 )( cout $end
$var wire 1 *( e1 $end
$var wire 1 +( e2 $end
$var wire 1 ,( e3 $end
$var wire 1 (( sum $end
$upscope $end
$scope module muxalu $end
$var wire 1 ~' e0 $end
$var wire 1 !( e1 $end
$var wire 1 (( e2 $end
$var wire 1 "( e3 $end
$var wire 2 -( op [1:0] $end
$var wire 1 '( out $end
$upscope $end
$upscope $end
$upscope $end
$scope module ALUCTL $end
$var wire 6 .( Funct [5:0] $end
$var wire 2 /( ALUOp [1:0] $end
$var reg 3 0( ALUOperation [2:0] $end
$var reg 1 e Multu $end
$var reg 2 1( sel [1:0] $end
$upscope $end
$scope module ALUMUX $end
$var wire 32 2( y [31:0] $end
$var wire 1 y sel $end
$var wire 32 3( b [31:0] $end
$var wire 32 4( a [31:0] $end
$upscope $end
$scope module AMUX $end
$var wire 32 5( y [31:0] $end
$var wire 2 6( sel [1:0] $end
$var wire 32 7( c [31:0] $end
$var wire 32 8( b [31:0] $end
$var wire 32 9( a [31:0] $end
$upscope $end
$scope module BMUX $end
$var wire 32 :( a [31:0] $end
$var wire 32 ;( y [31:0] $end
$var wire 2 <( sel [1:0] $end
$var wire 32 =( c [31:0] $end
$var wire 32 >( b [31:0] $end
$upscope $end
$scope module BRADD $end
$var wire 32 ?( b [31:0] $end
$var wire 32 @( result [31:0] $end
$var wire 32 A( a [31:0] $end
$upscope $end
$scope module C1 $end
$var wire 1 ! clk $end
$var wire 1 B( en_reg $end
$var wire 1 " rst $end
$var wire 7 C( d_in4 [6:0] $end
$var wire 1 Q d_in3 $end
$var wire 32 D( d_in2 [31:0] $end
$var wire 32 E( d_in1 [31:0] $end
$var reg 32 F( d_out1 [31:0] $end
$var reg 32 G( d_out2 [31:0] $end
$var reg 1 O d_out3 $end
$var reg 7 H( d_out4 [6:0] $end
$upscope $end
$scope module C2 $end
$var wire 1 ! clk $end
$var wire 1 # d_in10 $end
$var wire 7 I( d_in12 [6:0] $end
$var wire 32 J( d_in16 [31:0] $end
$var wire 5 K( d_in17 [4:0] $end
$var wire 5 L( d_in18 [4:0] $end
$var wire 6 M( d_in19 [5:0] $end
$var wire 5 N( d_in20 [4:0] $end
$var wire 1 O( d_in5 $end
$var wire 1 O d_in9 $end
$var wire 1 P( en_reg $end
$var wire 1 " rst $end
$var wire 2 Q( d_in8 [1:0] $end
$var wire 2 R( d_in7 [1:0] $end
$var wire 1 z d_in6 $end
$var wire 1 m d_in4 $end
$var wire 1 p d_in3 $end
$var wire 2 S( d_in2 [1:0] $end
$var wire 32 T( d_in15 [31:0] $end
$var wire 32 U( d_in14 [31:0] $end
$var wire 32 V( d_in13 [31:0] $end
$var wire 1 t d_in11 $end
$var wire 1 ` d_in1 $end
$var reg 1 _ d_out1 $end
$var reg 1 w d_out10 $end
$var reg 1 s d_out11 $end
$var reg 7 W( d_out12 [6:0] $end
$var reg 32 X( d_out13 [31:0] $end
$var reg 32 Y( d_out14 [31:0] $end
$var reg 32 Z( d_out15 [31:0] $end
$var reg 32 [( d_out16 [31:0] $end
$var reg 5 \( d_out17 [4:0] $end
$var reg 5 ]( d_out18 [4:0] $end
$var reg 6 ^( d_out19 [5:0] $end
$var reg 2 _( d_out2 [1:0] $end
$var reg 5 `( d_out20 [4:0] $end
$var reg 1 o d_out3 $end
$var reg 1 l d_out4 $end
$var reg 1 a( d_out5 $end
$var reg 1 y d_out6 $end
$var reg 2 b( d_out7 [1:0] $end
$var reg 2 c( d_out8 [1:0] $end
$var reg 1 P d_out9 $end
$upscope $end
$scope module C3 $end
$var wire 1 ! clk $end
$var wire 1 _ d_in1 $end
$var wire 32 d( d_in10 [31:0] $end
$var wire 32 e( d_in12 [31:0] $end
$var wire 2 f( d_in2 [1:0] $end
$var wire 1 o d_in3 $end
$var wire 1 l d_in4 $end
$var wire 1 g( d_in5 $end
$var wire 1 s d_in6 $end
$var wire 32 h( d_in7 [31:0] $end
$var wire 1 i( d_in8 $end
$var wire 1 j( en_reg $end
$var wire 1 " rst $end
$var wire 32 k( d_in9 [31:0] $end
$var wire 5 l( d_in11 [4:0] $end
$var reg 1 ^ d_out1 $end
$var reg 32 m( d_out10 [31:0] $end
$var reg 5 n( d_out11 [4:0] $end
$var reg 32 o( d_out12 [31:0] $end
$var reg 2 p( d_out2 [1:0] $end
$var reg 1 n d_out3 $end
$var reg 1 k d_out4 $end
$var reg 1 q( d_out5 $end
$var reg 1 r d_out6 $end
$var reg 32 r( d_out7 [31:0] $end
$var reg 1 s( d_out8 $end
$var reg 32 t( d_out9 [31:0] $end
$upscope $end
$scope module C4 $end
$var wire 1 ! clk $end
$var wire 1 ^ d_in1 $end
$var wire 2 u( d_in2 [1:0] $end
$var wire 32 v( d_in4 [31:0] $end
$var wire 5 w( d_in5 [4:0] $end
$var wire 32 x( d_in6 [31:0] $end
$var wire 1 y( en_reg $end
$var wire 1 " rst $end
$var wire 32 z( d_in3 [31:0] $end
$var reg 1 ] d_out1 $end
$var reg 2 {( d_out2 [1:0] $end
$var reg 32 |( d_out3 [31:0] $end
$var reg 32 }( d_out4 [31:0] $end
$var reg 5 ~( d_out5 [4:0] $end
$var reg 32 !) d_out6 [31:0] $end
$upscope $end
$scope module CALMUX $end
$var wire 32 ") a [31:0] $end
$var wire 2 #) sel [1:0] $end
$var wire 32 $) y [31:0] $end
$var wire 32 %) c [31:0] $end
$var wire 32 &) b [31:0] $end
$upscope $end
$scope module CTL $end
$var wire 6 ') opcode [5:0] $end
$var reg 2 () ALUOp [1:0] $end
$var reg 1 z ALUSrc $end
$var reg 1 v Branch $end
$var reg 1 t Jump $end
$var reg 1 p MemRead $end
$var reg 1 m MemWrite $end
$var reg 2 )) MemtoReg [1:0] $end
$var reg 2 *) RegDst [1:0] $end
$var reg 1 ` RegWrite $end
$upscope $end
$scope module DatMem $end
$var wire 1 n MemRead $end
$var wire 1 k MemWrite $end
$var wire 32 +) addr [31:0] $end
$var wire 1 ! clk $end
$var wire 32 ,) wd [31:0] $end
$var reg 32 -) rd [31:0] $end
$upscope $end
$scope module Forward $end
$var wire 5 .) EX_MEM_rd [4:0] $end
$var wire 5 /) MEM_WB_rd [4:0] $end
$var wire 1 ^ RegWrite_MEM $end
$var wire 1 ] RegWrite_WB $end
$var wire 2 0) alu_op [1:0] $end
$var wire 5 1) rs [4:0] $end
$var wire 1 " rst $end
$var wire 5 2) rt [4:0] $end
$var reg 2 3) forA [1:0] $end
$var reg 2 4) forB [1:0] $end
$upscope $end
$scope module HiLo $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 64 5) MultuAns [63:0] $end
$var wire 32 6) LoOut [31:0] $end
$var wire 32 7) HiOut [31:0] $end
$var reg 64 8) HiLo [63:0] $end
$upscope $end
$scope module InstrMem $end
$var wire 1 9) MemRead $end
$var wire 1 :) MemWrite $end
$var wire 1 ! clk $end
$var wire 32 ;) wd [31:0] $end
$var wire 32 <) addr [31:0] $end
$var reg 32 =) rd [31:0] $end
$upscope $end
$scope module JMUX $end
$var wire 32 >) b [31:0] $end
$var wire 1 t sel $end
$var wire 32 ?) y [31:0] $end
$var wire 32 @) a [31:0] $end
$upscope $end
$scope module Multiplier $end
$var wire 1 e Multu $end
$var wire 1 ! clk $end
$var wire 32 A) dataA [31:0] $end
$var wire 32 B) dataB [31:0] $end
$var wire 1 " reset $end
$var reg 32 C) A [31:0] $end
$var reg 7 D) count [6:0] $end
$var reg 64 E) dataOut [63:0] $end
$var reg 1 F) state $end
$var reg 64 G) temp [63:0] $end
$upscope $end
$scope module NOP $end
$var wire 1 ! clk $end
$var wire 32 H) instr [31:0] $end
$var wire 1 " rst $end
$var reg 1 d NOPSrc $end
$var reg 7 I) counter [6:0] $end
$var reg 1 Q en_pc $end
$var reg 32 J) instr2 [31:0] $end
$var reg 7 K) maxcount [6:0] $end
$upscope $end
$scope module NOPMUX $end
$var wire 32 L) a [31:0] $end
$var wire 32 M) b [31:0] $end
$var wire 1 d sel $end
$var wire 32 N) y [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk $end
$var wire 32 O) d_in [31:0] $end
$var wire 1 Q en_reg $end
$var wire 1 " rst $end
$var reg 32 P) d_out [31:0] $end
$upscope $end
$scope module PCADD $end
$var wire 32 Q) a [31:0] $end
$var wire 32 R) b [31:0] $end
$var wire 32 S) result [31:0] $end
$upscope $end
$scope module PCMUX $end
$var wire 32 T) a [31:0] $end
$var wire 32 U) b [31:0] $end
$var wire 1 $ sel $end
$var wire 32 V) y [31:0] $end
$upscope $end
$scope module RFMUX $end
$var wire 5 W) a [4:0] $end
$var wire 5 X) b [4:0] $end
$var wire 5 Y) c [4:0] $end
$var wire 2 Z) sel [1:0] $end
$var wire 5 [) y [4:0] $end
$upscope $end
$scope module RegFile $end
$var wire 5 \) RN1 [4:0] $end
$var wire 5 ]) RN2 [4:0] $end
$var wire 1 ] RegWrite $end
$var wire 5 ^) WN [4:0] $end
$var wire 1 ! clk $end
$var wire 32 _) WD [31:0] $end
$var reg 32 `) RD1 [31:0] $end
$var reg 32 a) RD2 [31:0] $end
$upscope $end
$scope module SignExt $end
$var wire 16 b) immed_in [15:0] $end
$var wire 32 c) ext_immed_out [31:0] $end
$upscope $end
$scope module WRMUX $end
$var wire 32 d) a [31:0] $end
$var wire 32 e) b [31:0] $end
$var wire 32 f) c [31:0] $end
$var wire 2 g) sel [1:0] $end
$var wire 32 h) y [31:0] $end
$upscope $end
$scope module equ $end
$var wire 32 i) RD1 [31:0] $end
$var wire 32 j) RD2 [31:0] $end
$var reg 1 \ zero $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 j)
b0 i)
b0 h)
b0 g)
b0 f)
b0 e)
b0 d)
b0 c)
b0 b)
b0 a)
b0 `)
b0 _)
b0 ^)
b0 ])
b0 \)
b0 [)
b0 Z)
b11111 Y)
b0 X)
b0 W)
b100 V)
b0 U)
b100 T)
b100 S)
b100 R)
b0 Q)
b0 P)
b100 O)
b10101101100000000000011001 N)
b0 M)
b10101101100000000000011001 L)
b100000 K)
b10101101100000000000011001 J)
b0 I)
b10101101100000000000011001 H)
b0 G)
xF)
b0 E)
b0 D)
bx C)
b0 B)
b0 A)
b100 @)
b100 ?)
b0 >)
b10101101100000000000011001 =)
b0 <)
b0 ;)
0:)
19)
b0 8)
b0 7)
b0 6)
b0 5)
b0 4)
b0 3)
b0 2)
b0 1)
b0 0)
b0 /)
b0 .)
bx -)
b0 ,)
b0 +)
b1 *)
b0 ))
b10 ()
b0 ')
b0 &)
b0 %)
b0 $)
b0 #)
b0 ")
b0 !)
b0 ~(
b0 }(
b0 |(
b0 {(
bx z(
1y(
b0 x(
b0 w(
b0 v(
b0 u(
b0 t(
0s(
b0 r(
0q(
b0 p(
b0 o(
b0 n(
b0 m(
b0 l(
b0 k(
1j(
zi(
b0 h(
zg(
b0 f(
bz e(
b0 d(
b0 c(
b0 b(
0a(
b0 `(
b0 _(
b0 ^(
b0 ](
b0 \(
b0 [(
b0 Z(
b0 Y(
b0 X(
b0 W(
b0 V(
b0 U(
b0 T(
b0 S(
b10 R(
b1 Q(
1P(
zO(
b0 N(
b0 M(
b0 L(
b0 K(
b0 J(
b0 I(
b0 H(
b0 G(
b0 F(
b100 E(
b10101101100000000000011001 D(
b100000 C(
1B(
b0 A(
b0 @(
b0 ?(
b0 >(
b0 =(
b0 <(
b0 ;(
b0 :(
b0 9(
b0 8(
b0 7(
b0 6(
b0 5(
b0 4(
b0 3(
b0 2(
b0 1(
b10 0(
b0 /(
b0 .(
b10 -(
0,(
0+(
0*(
0)(
0((
0'(
0&(
0%(
b10 $(
0#(
0"(
0!(
0~'
0}'
0|'
0{'
b10 z'
0y'
0x'
0w'
0v'
0u'
0t'
0s'
0r'
b10 q'
0p'
0o'
0n'
0m'
0l'
0k'
0j'
b10 i'
0h'
0g'
0f'
0e'
0d'
0c'
0b'
0a'
b10 `'
0_'
0^'
0]'
0\'
0['
0Z'
0Y'
b10 X'
0W'
0V'
0U'
0T'
0S'
0R'
0Q'
0P'
b10 O'
0N'
0M'
0L'
0K'
0J'
0I'
0H'
b10 G'
0F'
0E'
0D'
0C'
0B'
0A'
0@'
0?'
b10 >'
0='
0<'
0;'
0:'
09'
08'
07'
b10 6'
05'
04'
03'
02'
01'
00'
0/'
0.'
b10 -'
0,'
0+'
0*'
0)'
0('
0''
0&'
b10 %'
0$'
0#'
0"'
0!'
0~&
0}&
0|&
b10 {&
0z&
0y&
0x&
0w&
0v&
0u&
0t&
b10 s&
0r&
0q&
0p&
0o&
0n&
0m&
0l&
0k&
b10 j&
0i&
0h&
0g&
0f&
0e&
0d&
0c&
b10 b&
0a&
0`&
0_&
0^&
0]&
0\&
0[&
0Z&
b10 Y&
0X&
0W&
0V&
0U&
0T&
0S&
0R&
b10 Q&
0P&
0O&
0N&
0M&
0L&
0K&
0J&
0I&
b10 H&
0G&
0F&
0E&
0D&
0C&
0B&
0A&
b10 @&
0?&
0>&
0=&
0<&
0;&
0:&
09&
08&
b10 7&
06&
05&
04&
03&
02&
01&
00&
b10 /&
0.&
0-&
0,&
0+&
0*&
0)&
0(&
0'&
b10 &&
0%&
0$&
0#&
0"&
0!&
0~%
0}%
b10 |%
0{%
0z%
0y%
0x%
0w%
0v%
0u%
0t%
b10 s%
0r%
0q%
0p%
0o%
0n%
0m%
0l%
b10 k%
0j%
0i%
0h%
0g%
0f%
0e%
0d%
0c%
b10 b%
0a%
0`%
0_%
0^%
0]%
0\%
0[%
b10 Z%
0Y%
0X%
0W%
0V%
0U%
0T%
0S%
0R%
b10 Q%
0P%
0O%
0N%
0M%
0L%
0K%
0J%
b10 I%
0H%
0G%
0F%
0E%
0D%
0C%
0B%
0A%
b10 @%
0?%
0>%
0=%
0<%
0;%
0:%
09%
b10 8%
07%
06%
05%
04%
03%
02%
01%
00%
b10 /%
0.%
0-%
0,%
0+%
0*%
0)%
0(%
b10 '%
0&%
0%%
0$%
0#%
0"%
0!%
0~$
0}$
b10 |$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
b10 t$
0s$
0r$
0q$
0p$
0o$
0n$
0m$
0l$
b10 k$
0j$
0i$
0h$
0g$
0f$
0e$
0d$
b10 c$
0b$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
b10 Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
b10 R$
0Q$
0P$
0O$
0N$
0M$
0L$
0K$
0J$
b10 I$
0H$
0G$
0F$
0E$
0D$
0C$
0B$
b10 A$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
b10 8$
07$
06$
05$
04$
03$
02$
01$
b10 0$
0/$
0.$
0-$
0,$
0+$
0*$
0)$
0($
b10 '$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
b10 }#
0|#
0{#
0z#
0y#
0x#
0w#
0v#
0u#
b10 t#
0s#
0r#
0q#
0p#
0o#
0n#
0m#
b10 l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
b10 c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
b10 [#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
b10 R#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
b10 J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
b10 A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
b10 9#
08#
07#
06#
05#
04#
03#
02#
01#
b10 0#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
b10 (#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
b10 }"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
b10 u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
b10 l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
b10 d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
b10 ["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
b10 S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
b10 J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
b0 B"
0A"
b0 @"
b0 ?"
b0 >"
0="
b0 <"
b0 ;"
b0 :"
09"
b0 8"
b0 7"
b0 6"
05"
b0 4"
b0 3"
b0 2"
b0 1"
00"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b10 '"
b0 &"
b0 %"
b0 $"
b0 #"
0""
b0 !"
b0 ~
0}
b10 |
b0 {
0z
0y
b0 x
0w
0v
b0 u
0t
0s
0r
b0 q
0p
0o
0n
0m
0l
0k
b0 j
b0 i
b0 h
b0 g
b0 f
0e
0d
b10 c
b1 b
b0 a
1`
0_
0^
0]
1\
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b100 T
bx S
b0 R
0Q
0P
0O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b10101101100000000000011001 G
b0 F
b10101101100000000000011001 E
b10101101100000000000011001 D
b0 C
b0 B
b100000 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b100 6
b100 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
0$
z#
1"
1!
$end
#5
0!
#10
0\
b11 {&
b11 %'
b11 j&
b11 s&
b11 H&
b11 Q&
b11 7&
b11 @&
b11 &&
b11 /&
b11 s%
b11 |%
b11 b%
b11 k%
b11 Q%
b11 Z%
b11 @%
b11 I%
b11 /%
b11 8%
b11 |$
b11 '%
b11 k$
b11 t$
b11 I$
b11 R$
b11 8$
b11 A$
b11 '$
b11 0$
b11 t#
b11 }#
b11 c#
b11 l#
b11 R#
b11 [#
b11 A#
b11 J#
b11 0#
b11 9#
b11 }"
b11 (#
b11 l"
b11 u"
b11 $(
b11 -(
b11 q'
b11 z'
b11 `'
b11 i'
b11 O'
b11 X'
b11 >'
b11 G'
b11 -'
b11 6'
b11 Y&
b11 b&
b11 Z$
b11 c$
b11 ["
b11 d"
b11 J"
b11 S"
b10110110000000000001100100 C
b10110110000000000001100100 >)
b1100100 V
b1100100 ?(
b111 0
b111 T(
b111 a)
b111 j)
b110 2
b110 U(
b110 `)
b110 i)
b11 c
b11 '"
b11 0(
b10101101100000000000011001 B
b11001 N
b11001 V(
b11001 c)
b11001 H
b11001 b)
b11001 J
b11001 M(
b10110 '
b10110 L(
b10110 ])
b10101 )
b10101 N(
b10101 \)
b0 G
b0 D(
b0 N)
bx R
bx |(
bx e)
bz o(
zs(
zq(
zw
b1 a
b1 c(
b1 Z)
b10 {
b10 /(
b10 b(
b10 0)
za(
1_
b100000 ?
b100000 H(
b100000 I(
b10101101100000000000011001 F
b10101101100000000000011001 G(
b1101000 U
b1101000 @(
b1101000 U)
b100 9
b100 A(
b100 F(
b100 J(
b1 I)
1d
1!
0"
#15
0!
#20
1\
1Z&
1]&
1T&
1U$
1_$
b110 &"
1`"
1K"
1N"
b1100000000 !"
b1100000000 ,"
b1100000000 B"
b11000000000000000000000000 @"
1a$
1b"
1P"
b1100000000 ("
b1100000000 >"
b1100000000 ?"
b110000000000000000 <"
1\$
1V$
1]"
1W"
1L"
1G"
b1100000000 )"
b1100000000 :"
b1100000000 ;"
b1100000000 8"
1[$
1^$
0\"
0_"
19"
15"
10"
1T$
1U"
1D"
b110000 *"
b110000 6"
b110000 7"
b110000 4"
1W$
0`$
1X"
0a"
b0 C
b0 >)
b100 U
b100 @(
b100 U)
b0 V
b0 ?(
b0 0
b0 T(
b0 a)
b0 j)
b0 2
b0 U(
b0 `)
b0 i)
b111 =
b111 $"
b111 -"
b111 ;(
b111 B)
b1100 +"
b1100 1"
b1100 3"
b1100 /"
1S$
1T"
b0 B
b0 N
b0 V(
b0 c)
b0 H
b0 b)
b0 J
b0 M(
b0 '
b0 L(
b0 ])
b0 )
b0 N(
b0 \)
1e
b111 Z
b111 2(
b111 :(
b110 >
b110 %"
b110 ."
b110 2"
b110 5(
b110 A)
b10 I)
b0 F
b0 G(
b10101 (
b10101 `(
b10101 1)
b11001 I
b11001 .(
b11001 ^(
b10110 &
b10110 ](
b10110 2)
b10110 W)
b100 :
b100 [(
b100 h(
b111 /
b111 4(
b111 Z(
b111 d(
b110 1
b110 9(
b110 Y(
b11001 M
b11001 3(
b11001 X(
b100000 @
b100000 W(
1^
1!
#25
0!
#30
b0 !"
b0 ,"
b0 B"
b0 @"
0K"
0N"
0Z&
0]&
b0 ("
b0 >"
b0 ?"
b0 <"
b0 8"
0P"
0T&
0U$
b0 )"
b0 :"
b0 ;"
b0 *"
b0 6"
b0 7"
0\$
0W$
0]"
0X"
0L"
0G"
b0 4"
0b$
0[$
0^$
0_$
0\"
0_"
b0 &"
0`"
09"
05"
00"
0T$
0U"
0D"
b0 +"
b0 1"
b0 3"
0V$
0`$
0a$
0W"
0a"
0b"
b0 =
b0 $"
b0 -"
b0 ;(
b0 B)
b0 /"
0S$
0T"
0e
b0 Z
b0 2(
b0 :(
b0 >
b0 %"
b0 ."
b0 2"
b0 5(
b0 A)
1]
b111 .
b111 m(
b111 ,)
b100 8
b100 r(
b100 x(
b0 (
b0 `(
b0 1)
b0 I
b0 .(
b0 ^(
b0 &
b0 ](
b0 2)
b0 W)
b0 /
b0 4(
b0 Z(
b0 d(
b0 1
b0 9(
b0 Y(
b0 M
b0 3(
b0 X(
b11 I)
b1 D)
b110 C)
1F)
b1100000000000000000000000000000011 G)
1!
#35
0!
#40
b100 I)
b0 .
b0 m(
b0 ,)
b100 7
b100 !)
b100 f)
b10 D)
b10010000000000000000000000000000001 G)
1!
#45
0!
#50
b101 I)
b11 D)
b10101000000000000000000000000000000 G)
1!
#55
0!
#60
b110 I)
b100 D)
b1010100000000000000000000000000000 G)
1!
#65
0!
#70
b111 I)
b101 D)
b101010000000000000000000000000000 G)
1!
#75
0!
#80
b1000 I)
b110 D)
b10101000000000000000000000000000 G)
1!
#85
0!
#90
b1001 I)
b111 D)
b1010100000000000000000000000000 G)
1!
#95
0!
#100
b1010 I)
b1000 D)
b101010000000000000000000000000 G)
1!
#105
0!
#110
b1011 I)
b1001 D)
b10101000000000000000000000000 G)
1!
#115
0!
#120
b1100 I)
b1010 D)
b1010100000000000000000000000 G)
1!
#125
0!
#130
b1101 I)
b1011 D)
b101010000000000000000000000 G)
1!
#135
0!
#140
b1110 I)
b1100 D)
b10101000000000000000000000 G)
1!
#145
0!
#150
b1111 I)
b1101 D)
b1010100000000000000000000 G)
1!
#155
0!
#160
b10000 I)
b1110 D)
b101010000000000000000000 G)
1!
#165
0!
#170
b10001 I)
b1111 D)
b10101000000000000000000 G)
1!
#175
0!
#180
b10010 I)
b10000 D)
b1010100000000000000000 G)
1!
#185
0!
#190
b10011 I)
b10001 D)
b101010000000000000000 G)
1!
#195
0!
#200
b10100 I)
b10010 D)
b10101000000000000000 G)
1!
#205
0!
#210
b10101 I)
b10011 D)
b1010100000000000000 G)
1!
#215
0!
#220
b10110 I)
b10100 D)
b101010000000000000 G)
1!
#225
0!
#230
b10111 I)
b10101 D)
b10101000000000000 G)
1!
#235
0!
#240
b11000 I)
b10110 D)
b1010100000000000 G)
1!
#245
0!
#250
b11001 I)
b10111 D)
b101010000000000 G)
1!
#255
0!
#260
b11010 I)
b11000 D)
b10101000000000 G)
1!
#265
0!
#270
b11011 I)
b11001 D)
b1010100000000 G)
1!
#275
0!
#280
b11100 I)
b11010 D)
b101010000000 G)
1!
#285
0!
#290
b11101 I)
b11011 D)
b10101000000 G)
1!
#295
0!
#300
b11110 I)
b11100 D)
b1010100000 G)
1!
#305
0!
#310
b11111 I)
b11101 D)
b101010000 G)
1!
#315
0!
#320
b100000 I)
b11110 D)
b10101000 G)
1!
#325
0!
#330
b1000000000010000 D
b1000000000010000 J)
b1000000000010000 L)
b1000 5
b1000 ?)
b1000 O)
b1000 T
b1000 @)
b1000 V)
b1000000000010000 E
b1000000000010000 =)
b1000000000010000 H)
b1000 6
b1000 E(
b1000 S)
b1000 T)
b100 ;
b100 <)
b100 P)
b100 Q)
b1000000000010000 G
b1000000000010000 D(
b1000000000010000 N)
0d
b0 A
b0 C(
b0 K)
1Q
b0 I)
b11111 D)
b1010100 G)
1!
#335
0!
#340
b1000100000010010 G
b1000100000010010 D(
b1000100000010010 N)
b1000100000010010 D
b1000100000010010 J)
b1000100000010010 L)
b100000000001000000 C
b100000000001000000 >)
b11111111111111100000000001000000 V
b11111111111111100000000001000000 ?(
b1100 5
b1100 ?)
b1100 O)
b1000000000010000 B
b11111111111111111000000000010000 N
b11111111111111111000000000010000 V(
b11111111111111111000000000010000 c)
b1000000000010000 H
b1000000000010000 b)
b10000 J
b10000 M(
b10000 4
b10000 K(
b1100 T
b1100 @)
b1100 V)
b1000100000010010 E
b1000100000010010 =)
b1000100000010010 H)
b0 I)
b0 ?
b0 H(
b0 I(
1O
b1000000000010000 F
b1000000000010000 G(
b11111111111111100000000001001000 U
b11111111111111100000000001001000 @(
b11111111111111100000000001001000 U)
b1000 9
b1000 A(
b1000 F(
b1000 J(
b1100 6
b1100 E(
b1100 S)
b1100 T)
b1000 ;
b1000 <)
b1000 P)
b1000 Q)
b100000 D)
b101010 G)
1!
#345
0!
#350
bx G
bx D(
bx N)
bx D
bx J)
bx L)
b10000 +
b10000 l(
b10000 [)
b100010000001001000 C
b100010000001001000 >)
b11111111111111100010000001001000 V
b11111111111111100010000001001000 ?(
b10000 5
b10000 ?)
b10000 O)
b1 x
b1 1(
b1 #)
b1000100000010010 B
b11111111111111111000100000010010 N
b11111111111111111000100000010010 V(
b11111111111111111000100000010010 c)
b1000100000010010 H
b1000100000010010 b)
b10010 J
b10010 M(
b10001 4
b10001 K(
b10000 T
b10000 @)
b10000 V)
bx E
bx =)
bx H)
b10000 I
b10000 .(
b10000 ^(
b10000 3
b10000 \(
b10000 X)
b1000 :
b1000 [(
b1000 h(
b11111111111111111000000000010000 M
b11111111111111111000000000010000 3(
b11111111111111111000000000010000 X(
b0 @
b0 W(
1P
b1000100000010010 F
b1000100000010010 G(
b11111111111111100010000001010100 U
b11111111111111100010000001010100 @(
b11111111111111100010000001010100 U)
b1100 9
b1100 A(
b1100 F(
b1100 J(
b0 I)
b10000 6
b10000 E(
b10000 S)
b10000 T)
b1100 ;
b1100 <)
b1100 P)
b1100 Q)
b101010 q
b101010 %)
b101010 6)
b101010 8)
b100001 D)
0F)
b101010 f
b101010 5)
b101010 E)
1!
#355
0!
#360
0\
0$
b0xxxxxxxxxxxxxxxxxxxxxxxx00 C
b0xxxxxxxxxxxxxxxxxxxxxxxx00 >)
bx00 V
bx00 ?(
bx 0
bx T(
bx a)
bx j)
bx 2
bx U(
bx `)
bx i)
bx |
bx R(
bx ()
xt
xv
xm
xp
x`
bx j
bx S(
bx ))
xz
bx b
bx Q(
bx *)
b101010 Y
b101010 k(
b101010 $)
b10001 +
b10001 l(
b10001 [)
b0xxxxxxxxxxxxxxxxxxxxxxxx00 5
b0xxxxxxxxxxxxxxxxxxxxxxxx00 ?)
b0xxxxxxxxxxxxxxxxxxxxxxxx00 O)
bx B
bx N
bx V(
bx c)
bx H
bx b)
bx J
bx M(
bx %
bx 4
bx K(
bx '
bx L(
bx ])
bx )
bx N(
bx \)
bx <
bx ')
b10 x
b10 1(
b10 #)
b10100 T
b10100 @)
b10100 V)
b0 I)
bx F
bx G(
bx U
bx @(
bx U)
b10000 9
b10000 A(
b10000 F(
b10000 J(
b10010 I
b10010 .(
b10010 ^(
b10001 3
b10001 \(
b10001 X)
b1100 :
b1100 [(
b1100 h(
b11111111111111111000100000010010 M
b11111111111111111000100000010010 3(
b11111111111111111000100000010010 X(
b10000 *
b10000 n(
b10000 w(
b10000 .)
b1000 8
b1000 r(
b1000 x(
b10100 6
b10100 E(
b10100 S)
b10100 T)
b10000 ;
b10000 <)
b10000 P)
b10000 Q)
1!
#365
0!
#370
x$'
xr&
xP&
x?&
x.&
x{%
xj%
xY%
xH%
x7%
x&%
xs$
xQ$
x@$
x/$
x|#
xk#
xZ#
xI#
x8#
x'#
xt"
x,(
xy'
xh'
xW'
xF'
x5'
xa&
xb$
xc"
xv&
xe&
xC&
x2&
x!&
xn%
x]%
xL%
x;%
x*%
xw$
xf$
xD$
x3$
x"$
xo#
x^#
xM#
x<#
x+#
xx"
xg"
x}'
xl'
x['
xJ'
x9'
x('
xT&
xU$
xV"
bx [
bx #"
bx ")
bx0000000000000000 @"
bx00000000 <"
bx0000 8"
xH"
x""
x~&
x!'
xk&
xn&
xo&
xI&
xL&
xM&
x8&
x;&
x<&
x'&
x*&
x+&
xt%
xw%
xx%
xc%
xf%
xg%
xR%
xU%
xV%
xA%
xD%
xE%
x0%
x3%
x4%
x}$
x"%
x#%
xl$
xo$
xp$
xJ$
xM$
xN$
x9$
x<$
x=$
x($
x+$
x,$
xu#
xx#
xy#
xd#
xg#
xh#
xS#
xV#
xW#
xB#
xE#
xF#
x1#
x4#
x5#
x~"
x##
x$#
xm"
xp"
xq"
x%(
x((
x)(
xr'
xu'
xv'
xa'
xd'
xe'
xP'
xS'
xT'
x?'
xB'
xC'
x.'
x1'
x2'
xZ&
x]&
x^&
x[$
x^$
x_$
x\"
x_"
x`"
xR"
bx &"
xO"
x}&
xm&
xK&
x:&
x)&
xv%
xe%
xT%
xC%
x2%
x!%
xn$
xL$
x;$
x*$
xw#
xf#
xU#
xD#
x3#
x"#
xo"
x'(
xt'
xc'
xR'
xA'
x0'
x\&
x]$
x^"
bx ~
xM"
bx !"
bx ,"
bx B"
bx ("
bx >"
bx ?"
bx )"
bx :"
bx ;"
bx *"
bx 6"
bx 7"
bx00 4"
xw&
xx&
x"'
x#'
xf&
xg&
xp&
xq&
xD&
xE&
xN&
xO&
x3&
x4&
x=&
x>&
x"&
x#&
x,&
x-&
xo%
xp%
xy%
xz%
x^%
x_%
xh%
xi%
xM%
xN%
xW%
xX%
x<%
x=%
xF%
xG%
x+%
x,%
x5%
x6%
xx$
xy$
x$%
x%%
xg$
xh$
xq$
xr$
xE$
xF$
xO$
xP$
x4$
x5$
x>$
x?$
x#$
x$$
x-$
x.$
xp#
xq#
xz#
x{#
x_#
x`#
xi#
xj#
xN#
xO#
xX#
xY#
x=#
x>#
xG#
xH#
x,#
x-#
x6#
x7#
xy"
xz"
x%#
x&#
xh"
xi"
xr"
xs"
x~'
x!(
x*(
x+(
xm'
xn'
xw'
xx'
x\'
x]'
xf'
xg'
xK'
xL'
xU'
xV'
x:'
x;'
xD'
xE'
x)'
x*'
x3'
x4'
xU&
xV&
x_&
x`&
xV$
xW$
x`$
xa$
xW"
xX"
xa"
xb"
xF"
xG"
xP"
xQ"
x|&
xl&
xJ&
x9&
x(&
xu%
xd%
xS%
xB%
x1%
x~$
xm$
xK$
x:$
x)$
xv#
xe#
xT#
xC#
x2#
x!#
xn"
x&(
xs'
xb'
xQ'
x@'
x/'
x[&
x\$
x]"
xL"
xK"
xN"
xA"
x="
x9"
x5"
x0"
xu&
xd&
xB&
x1&
x~%
xm%
x\%
xK%
x:%
x)%
xv$
xe$
xC$
x2$
x!$
xn#
x]#
xL#
x;#
x*#
xw"
xf"
x|'
xk'
xZ'
xI'
x8'
x''
xS&
xT$
xU"
xD"
bx +"
bx 1"
bx 3"
bx0 /"
xt&
xc&
xA&
x0&
x}%
xl%
x[%
xJ%
x9%
x(%
xu$
xd$
xB$
x1$
x~#
xm#
x\#
xK#
x:#
x)#
xv"
xe"
x{'
xj'
xY'
xH'
x7'
x&'
xR&
xS$
xT"
xC"
xz&
bx {&
bx %'
xi&
bx j&
bx s&
xG&
bx H&
bx Q&
x6&
bx 7&
bx @&
x%&
bx &&
bx /&
xr%
bx s%
bx |%
xa%
bx b%
bx k%
xP%
bx Q%
bx Z%
x?%
bx @%
bx I%
x.%
bx /%
bx 8%
x{$
bx |$
bx '%
xj$
bx k$
bx t$
xH$
bx I$
bx R$
x7$
bx 8$
bx A$
x&$
bx '$
bx 0$
xs#
bx t#
bx }#
xb#
bx c#
bx l#
xQ#
bx R#
bx [#
x@#
bx A#
bx J#
x/#
bx 0#
bx 9#
x|"
bx }"
bx (#
xk"
bx l"
bx u"
x#(
bx $(
bx -(
xp'
bx q'
bx z'
x_'
bx `'
bx i'
xN'
bx O'
bx X'
x='
bx >'
bx G'
x,'
bx -'
bx 6'
xX&
bx Y&
bx b&
xY$
bx Z$
bx c$
xZ"
bx ["
bx d"
xI"
bx J"
bx S"
xE"
bx Y
bx k(
bx $)
bx =
bx $"
bx -"
bx ;(
bx B)
bx 5
bx ?)
bx O)
bx >
bx %"
bx ."
bx 2"
bx 5(
bx A)
bx +
bx l(
bx [)
bx c
bx '"
bx 0(
b0 x
b0 1(
b0 #)
bx Z
bx 2(
bx :(
bx T
bx @)
bx V)
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx00 C
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx00 >)
b1000 7
b1000 !)
b1000 f)
b10000 ,
b10000 ~(
b10000 /)
b10000 ^)
b10001 *
b10001 n(
b10001 w(
b10001 .)
b101010 X
b101010 7(
b101010 =(
b101010 t(
b101010 v(
b101010 +)
b1100 8
b1100 r(
b1100 x(
bx (
bx `(
bx 1)
bx I
bx .(
bx ^(
bx &
bx ](
bx 2)
bx W)
bx 3
bx \(
bx X)
b10000 :
b10000 [(
b10000 h(
bx /
bx 4(
bx Z(
bx d(
bx 1
bx 9(
bx Y(
bx M
bx 3(
bx X(
xs
bx a
bx c(
bx Z)
bx {
bx /(
bx b(
bx 0)
xy
xl
xo
bx i
bx _(
bx f(
x_
b10100 9
b10100 A(
b10100 F(
b10100 J(
b0 I)
bx 6
bx E(
bx S)
bx T)
b0xxxxxxxxxxxxxxxxxxxxxxxx00 ;
b0xxxxxxxxxxxxxxxxxxxxxxxx00 <)
b0xxxxxxxxxxxxxxxxxxxxxxxx00 P)
b0xxxxxxxxxxxxxxxxxxxxxxxx00 Q)
1!
#375
0!
#380
b101010 -
b101010 8(
b101010 >(
b101010 _)
b101010 h)
b0 I)
bx 9
bx A(
bx F(
bx J(
b10100 :
b10100 [(
b10100 h(
bx *
bx n(
bx w(
bx .)
bx .
bx m(
bx ,)
bx X
bx 7(
bx =(
bx t(
bx v(
bx +)
b10000 8
b10000 r(
b10000 x(
xr
xk
xn
bx h
bx p(
bx u(
x^
b1100 7
b1100 !)
b1100 f)
b10001 ,
b10001 ~(
b10001 /)
b10001 ^)
b101010 W
b101010 }(
b101010 d)
bx ;
bx <)
bx P)
bx Q)
1!
#385
0!
#390
bx -
bx 8(
bx >(
bx _)
bx h)
b10000 7
b10000 !)
b10000 f)
bx ,
bx ~(
bx /)
bx ^)
bx W
bx }(
bx d)
bx g
bx {(
bx g)
x]
b10100 8
b10100 r(
b10100 x(
bx :
bx [(
bx h(
b0 I)
1!
#395
0!
#400
b0 I)
bx 8
bx r(
bx x(
b10100 7
b10100 !)
b10100 f)
1!
#405
0!
#410
bx 7
bx !)
bx f)
b0 I)
1!
#415
0!
#420
b0 I)
1!
#425
0!
#430
b0 I)
1!
#435
0!
#440
b0 I)
1!
#445
0!
#450
b0 I)
1!
